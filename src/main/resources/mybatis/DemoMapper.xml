<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.xllapp.portal.demo.dao.DemoDao">

   <resultMap id="demoResultMap" type="org.xllapp.portal.demo.entity.Demo">
          <result property="id" column="id"/>
          <result property="name" column="name"/>
          <result property="password" column="password"/>
          <result property="icon" column="icon"/>
          <result property="status" column="status"/>
          <result property="createTime" column="create_time"/>
   </resultMap>
   
   	<sql id="demoColumns">
	    <![CDATA[
		id,name,password,icon,status,create_time
	    ]]>
	</sql>
	
	<select id="query"  parameterType="map"  resultMap="demoResultMap">
		select <include refid="demoColumns" />
        from demo
		<where>
			      <if test="@Ognl@isNotEmpty(name)">
				  and name = #{name}
			      </if>
			      <if test="@Ognl@isNotEmpty(status)">
				  and status = #{status}
			      </if>
			      <if test="@Ognl@isNotEmpty(createTimeBegin) and @Ognl@isNotEmpty(createTimeEnd)">
				  and create_time between str_to_date(#{createTimeBegin},'%Y-%m-%d %H:%i:%s') and str_to_date(#{createTimeEnd},'%Y-%m-%d %H:%i:%s')
			      </if>
		</where>
		order by id desc
	</select>

	<select id="get" parameterType="long" resultMap="demoResultMap">		
		select <include refid="demoColumns" />
	    <![CDATA[
		    from demo where id = #{id} 
	    ]]>
	</select>
	
	<insert id="insert" parameterType="org.xllapp.portal.demo.entity.Demo" useGeneratedKeys="true" keyProperty="id">        
    <![CDATA[
        insert into  demo (
        	name ,
        	password ,
        	icon ,
        	status ,
        	create_time 
        ) values (
        	#{name},
        	#{password},
        	#{icon},
        	#{status},
        	now()
        )
    ]]>  
	</insert>

	<update id="update" parameterType="org.xllapp.portal.demo.entity.Demo">
	<![CDATA[
		update demo set 
	       name = #{name},
	       password = #{password},
	       icon = #{icon},
	       status = #{status},
	       create_time = #{createTime}
		where  id = #{id}
	 ]]>
	</update>
	
	<delete id="delete" parameterType="int">
		delete from demo where id = #{id}
	</delete>
	
	<delete id="deletes">
		delete from demo where id in 
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">#{item}</foreach>
    </delete>
	
</mapper> 
